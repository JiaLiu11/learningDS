for (i in seq_along(m[1,])) {
for (j in seq_along(m[,1])) {
print(m[i,j])
}
}
m=matrix(1:6,2,3)
for (i in seq_along(m[,1])) {
for (j in seq_along(m[1,])) {
print(m[i,j])
}
}
count =0
while(cout<10) {
print(count)
count =count+1
}
count =0
while(count<10) {
print(count)
count =count+1
}
help(rbinom)
count =0
while() {
print(count)
count =count+1
}
help(*apply)
help(apply)
rm(list=ls())
r=rnorm(100)
mean(r)
sd(r)
f=function(a,b){
return a^2
}
f(2)
f=function(a,b) {
return a^2
}
f(2)
f=function(a,b) {
a^2
}
f(2)
f=function(a,b) {
return a^2
}
f(2)
f=function(a,b) {
return a^2
}
f(2)
function(a,b) {
return a^2
}
mean
args(paste)
arge(mean)
args(cat)
add2=function(a,b) {
x+y
}
add2(3,4)
add2=function(a,b) {
a+b
}
add2(3,4)
add2(3,"b")
above10<-function(x) {
use = x>10
x[use]
}
above10(2:11)
above=function(x,n) {
use = x>n
x[use]
}
above(1:11,10)
above=function(x,n = 10) {
use = x>n
x[use]
}
above(1:11,12)
above(1:11)
colmean= function(y) {
nc=ncol(y)
means = numeric(nc)
for (i in 1:nc) {
means[i] = mean(y[,i])
}
means
}
colmean(airquality)
airquality[1,]
colmean= function(y, removeNA=TRUE) {
nc=ncol(y)
means = numeric(nc)
for (i in 1:nc) {
means[i] = mean(y[,i], na.rm = removeNA)
}
means
}
colmean(airquality)
help(na.rm)
??na.rm
na
help(na)
??na
mean(airquality)
mean(matrix(1:6,2,3))
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z=10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
aa=read.csv("titanic_data.csv")
bb=aa[complete.bases(aa),]
aa=read.csv("titanic_data.csv",header=1)
bb=aa[complete.bases(aa),]
View(aa)
source("complete.R")
bb=aa[complete.cases(aa),]
cc=bb$Sex
table(cc)
bb$Sex[bb$Sex=="female"]=1
bb$Sex=="female"
bb$Sex
bb[["Sex"]][bb$Sex=="female"]=0
type()
typeof(bb$Sex)
typeof(bb[["Sex"]])
bb$Sex[1:2]
levels(bb$Sex)[bb$Sex]
as.numeric(levels(bb$Sex)[bb$Sex])
cc=bb$Sex
levels(cc)=c(0,1)
cc
table(cc)
table(bb)
table(bb$Sex)
View(bb)
bb=aa[complete.cases(aa),]
View(bb)
cc=bb$Sex
levels(cc)
levels(cc)=c(0,1)
table(cc)
bb$Sex=cc
View(bb)
table(bb$Sex)
as.numeric(bb$Sex)
as.numeric(levels(bb)[bb])
mean(as.numeric(levels(cc)[cc]))
cor(as.numeric(levels(bb$Survived)[bb$Survived]), as.numeric(levels(cc)))
cor(as.numeric(levels(bb$Survived)[bb$Survived]), as.numeric(levels(cc)[cc]))
as.numeric(levels(bb$Survived)[bb$Survived])
as.numeric(levels(cc)[cc])
dd=bb$Survived
typeof(dd)
typeof(cc)
mean(dd)
cor(dd, as.numeric(levels(cc)[cc]))
cc
levels(cc)
levels(cc)=c("1","0")
cor(dd, as.numeric(levels(cc)[cc]))
typeof(bb$Pclass)
mean(bb$Pclass)
cor(dd,bb$Pclass)
cor(dd,bb$Age)
cor(dd,bb$Fare)
y=bb[["Survived"]]
x1=as.numeric(levels(cc)[cc])
x2=bb[["Pclass"]]
x3=bb[["Age"]]
help(lm)
fit=lm(y~x1+x2+x3)
summary(fit)
coefficients(fit)
confint(fit, level=0.95)
fitted(fit)
layout(matrix(c(1,2,3,4),2,2))
plot(fit)
print(aa)
rep(NA, 2)
t(rep(NA, 2))
available.packages()
install.package("KernSmooth")
package.install("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
x=list(1:3)
lapply(x,mean)
x
x=list(1:3,2:6)
lapply(x,mean)
x
x$1
x[1]
x=list(a=1:3,b=1:5)
lapply(x,mean)
x=1:4
lapply(x,runif)
runif(1)
x=list(1:4)
x[1]
x[[1]
]
x[[1]][1]
x[1][1]
x=list(a=1:2,b=rnorm(5),c=3:2:10)
x
lapply(x,mean)
x
sapply(x,mean)
y=sapply(x,mean)
y
typeof(y)
typeof(x)
y[1]
y[[1]]
y$a
names(y)
levels(y)
rnorm(2*2*10)
rnorm(2 * 2 * 10)
a<-array(rnorm(2*2*10),c(2,2,10))
a
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(10000))
str(array)
str(vector)
a=seq(1,10,2)
a
seq_along(a)
seq_len(a)
seq_len(1)
seq_len(3)
help(gl)
gl(20,1,20)
gl(2,1,20)
gl(3,10)
gl(3,10,30)
gl(3,1,30)
gl(2, 2, 20)
help(interaction)
a=gl(2,5)
b=gl(5,2)
a
b
interaction(a,b)
interaction(a,b,lex.order=T)
interaction(b,a,lex.order=T)
f1=gl(2,5)
f2=gl(5,2)
x=rnorm(10)
interaction(f1,f2)
x
split(x,list(f1,f2))
list(f1,f2)
str(lapply)
mapply(rep, 1:4,2:5)
mapply(rep, 1:100,1)
mapply(rep, 1:100,2)
aa=mapply(rep, 1:100,2)
str(aa)
head(aa)
mapply(rnorm, 1:5, 2:5,2)
help(mean)
tapply(1:3,function(x) x=2)
lapply(1:3,function(x) x=2)
lapply(1:3,function(x) {x=2 invisible(x)})
NA>1
if(NA)
print(NA)
lapply(1:3, function(x) {x[is.na(x)]=0})
lapply(1:3, function(x) {x[!is.na(x)]=0})
sd(x)
x={}
sd(x)
rm(list=ls())
sd(x)
traceback(x)
trace(x)
mean((x))
mean(x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
e
exit
q()
help(browser)
library(datasets)
data(iris)
head(iris)
mean(iris[iris$Species==virginica,]["Sepal.Length"])
mean(iris[iris$Species=="virginica",]["Sepal.Length"])
typeof(iris$Sepal.Length)
mean(iris[iris$Species=="virginica",]["Sepal.Length"],na.rm=T)
traceback()
aa=iris[iris$Species=="virginca",]
head(aa)
mean(iris[iris$Species=="virginica",]["Sepal.Length"],na.rm=T)
aa=iris[iris$Species=="virginica",]
aa
head(aa)
mean(iris[iris$Species=="virginica",][["Sepal.Length"]],na.rm=T)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 2, mean)
rm(list=ls())
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sum(complete.cases(mtcars))
tapply(mtcars$cyl,mtcars$mpg,mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars,tapply(hp, cyl, mean))
209.2149-82.63636
debug(ls)
ls
ls()
q
clc
clear all
apply(matrix(1:9,3,3),mean, 2)
apply(matrix(1:9,3,3),mean)
apply(matrix(1:9,3,3),2,mean)
lapply(matrix(1:9,3,3),2,mean)
install.packages("devtools")
library(devtools)
devtools::install_github("hadley/pryr")
e<-new.env()
e
e$a
e$b
typeof(e)
e
search()
globalenv()
as.environment("package:graphics")
e<-new.env()
parent.env(e)
ls(e)
e$a<-1
e$b<-2
ls(e)
e$a
typeof(e)
e$.a=-1
ls(e)
ls(e,all.names=T)
e
ls(e)
ls.str(e)
ls.str(e,all.names=T)
e$c=3
e$c
e[["c"]]
get("c")
get("c",envir=e)
ls(e)
str.ls(e)
ls.str(e)
parent.env("autoload")
search()
parent.env("Autoloads")
parent.env(Autoloads)
parent.env()
parent.env(e)
parent.env(package:methods)
parent.env("package:methods")
env("e")
env(e)
parent.env(as.environment("package:stats"))
as.environment("Autoloads")
as.environment("Autoloads")[1]
as.environment("Autoloads")
library(pryr)
x<-5
where("x")
where("mean")
where("e")
where("a",e)
debug(where)
where()
str(str)
str(mean)
str(lm)
x=rnorm(100)
typeof(x)
str(x)
library(datasets)
head(airquality)
str(airquality)
nrow(airquality)
ncol(airquality)
help(ppois)
help(rnbim)
sys.time()
system.time()
system.time(mean(rnorm(100)))
hibert=function(n){}
hibert=function(n){}
hibert=function(n){ }
help(svd)
help(outer)
sample.interval=10000
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
data(USArrests)
aa<-USArrests[USArrests$UrbanPop]
View(USArrests)
aa<-USArrests[USArrests$UrbanPop>=77.75,]
aa
subset(USArrests, subset=(UrbanPop >= 77.75)) ->high.urban
high.urban
is.na(USArrests)
names(aa)
?stack
require(stats)
formula(PlantGrowth)
head(PlantGrowth)
pg<-unstack(PlantGrowth)
head(pg)
stack(pg)
stack(pg, select=-ctrl)
head(pg)
names(pg)
dim(pg)
nrow(pg)
ncol(pg)
data(anorexia, package="MASS")
View(anorexia)
str(anorexia)
summary(anorexia)
row.names(anorexia)
?corr
?lim
?lm
getwd()
setwd("~/code/rLearning/playground/rProgramingAssignments/courseraAssign3/rprog-data-ProgAssignment3-data")
example(data.table)
require(data.table)
example(data.table)
DF=data.frame(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DF
DT = data.table(x=rep(c("a","b","c"),each=3),y=c(1,3,6),v=1:9)
table()
tables()
X
rm(X)
summary(DT)
str(DT)
str(DF)
setkey(DT,x)
tables()
DT
DT["b"]
DT["b",]
DT[v]
DT[,v]
DT[1,v]
DT[2,v]
DT[3,v]
DT[,w=1:3]
DT[,w:=1:3]
DT
setkey(DT,y)
tables()
DT
setkey(DT,x)
DT
DT[J("a",3:6)]
DT
DT[,sum(v),by=x]
DT[,list(vSum=sum(v)),vMin=min(v),vMax=max(v),by=list(x,y)]
DT[,list(vSum=sum(v),vMin=min(v),vMax=max(v),by=list(x,y))]
DT[,5]
DT[,2]
DT[,v]
DT[,x]
DT[,"c"]
DT[,"w"]
DT[,"w",with=false]
DT[,"w",with=False]
DT[,"w",with=F]
DF
DF[1,2]
DF[,2]
DF[,"y"]
DF[,"y",with=F]
