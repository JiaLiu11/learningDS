?clfit
?det
?as.matrix
?inv
?solve
?mean
x=matrix(1,nrow=10,ncol=10)
x
solve(x)
det(x)
cov(x)
x=matrix(1,nrow=10,ncol=2)
cov(x)
transpose(x)
t(x)
cov(t(x))
rowMeans(x)
colMeans(x)
x
load("~/code/kaggleProject/driverTelematicsAnalysis/.RData")
View(df)
df=coord
View(df)
df=coord[,1:6]
var_name="r"
derv_name="speed"
x_before = df[[var_name]]
head(x_before)
groupEnd_name="group_end"
View(df)
df[[derv_name]] = x_after - x_before
x_after  = x_before[-1]
x_after[length(x_before)]=0 # out of range, set to zero
df[[derv_name]] = x_after - x_before
View(df)
df[which(df[[groupEnd_name]]==1),derv_name]=0
View(df)
setwd("~/code/kaggleProject/driverTelematicsAnalysis")
driver_id = 1
db_filename = file.path("drivers_dbs", paste0(driver_id, ".db"))
db_filename
library(RSQLite)
library(dplyr)
driver_db = src_sqlite(db_name)
db_name=db_filename
driver_db = src_sqlite(db_name)
driver_sqlite=tbl(driver_db, "driver_data")
coord = collect(select(driver_sqlite, x, y, trip_id))
View(coord)
temp = coord$trip_id
temp = temp[-1]
temp[length(temp)+1]=201
coord = mutate(coord, r=sqrt(x**2+y**2), theta=atan2(y,x), group_end = temp-trip_id)
View(coord)
source('auxFunctions_AD.R')
source('auxFunctions_AD.R')
coord = calDerivative(coord, "r", "speed")
View(coord)
coord = fixInfinityByMean(coord, "trip_id", "speed", 134)
source('auxFunctions_AD.R')
coord = calDerivative(coord, "speed", "acc")
coord = fixInfinityByMean(coord, "trip_id", "acc", 11)
source('auxFunctions_AD.R')
View(coord)
coord = calDerivative(coord, "theta", "angular_speed")
coord = fixInfinityByMean(coord, "trip_id", "angular_speed", pi)
coord = calDerivative(coord, "angular_speed", "angular_acc")
View(coord)
coord$hard_break = (coord$acc< -3.13)
coord$on_highway = coord$speed>26.8
trip_signature2 = coord %>% group_by(trip_id) %>%
summarise(mean_speed = mean(speed), mean_acc = mean(acc),
mean_angular_speed=mean(angular_speed), mean_angular_acc=mean(angular_acc),
trip_length= sum(r), hardBreaks_10M= sum(hard_break)/trip_length*10,
highway_time =sum(on_highway))
View(trip_signature2)
View(trip_signature_scaled)
View(trip_signature)
trip_signature_scaled = transmute(trip_signature,
mean_v=log(abs(mean_speed+1)),
mean_a=log(abs(mean_acc+1)),
mean_w=mean_angular_speed,
mean_alpha=mean_angular_acc,
s = log(trip_length),
breaks=log(hardBreaks_10M+1),
h_time = log(highway_time+1))
View(trip_signature)
View(trip_signature_scaled)
log(2)
log(1)
trip_signature_scaled = transmute(trip_signature,
mean_v=log(abs(mean_speed+1)),
mean_a=log(abs(mean_acc+1)),
mean_w=mean_angular_speed,
mean_alpha=mean_angular_acc,
s = log(trip_length),
breaks=log(hardBreaks_10M+2),
h_time = log(highway_time+2))
View(trip_signature_scaled)
source('Untitled.R')
db_filename
driver_signatures = featureExtraction(db_filename)
source('Untitled.R')
driver_signatures = featureExtraction(db_filename)
system(featureExtraction(db_filename))
system(aa=featureExtraction(db_filename))
system.time(aa=featureExtraction(db_filename))
system.time(driver_signatures = featureExtraction(db_filename))
driver_signatures = featureExtraction(db_filename)
system.time(featureExtraction(db_filename))
0.24*2700
str(driver_signatures)
head(driver_signatures)
aa=as.matrix(driver_signatures)
feature_matrix = as.matrix(driver_signatures)
feature_cov = cov(feature_matrix)
feature_cov_inv = solve(feature_cov)
feature_cov_inv
feature_cov_det = det(feature_cov)
feature_cov_det
aa=feature_matrix
View(aa)
bb=sapply(aa, function(x){x-mean(x)})
bb=lapply(aa, function(x){x-mean(x)})
colMeans(aa)
bb=aa-colMeans(aa)
View(bb)
View(aa)
?rep
colMeans(bb)
?scale
bb=scale(aa,scale=F)
colMeans(bb)
feature_matrix_centered = scale(feature_matrix, scale=FALSE)
feature_cov_inv
exp_argument = -0.5*feature_matrix_centered%*%feature_cov_inv%*%t(feature_matrix_centered)
exp_argument
rep(0,200)
p_ad = rep(0,200)
coef = 1.0/(2.0*pi*sqrt(feature_cov_det))
i=1
x = feature_matrix_centered[i,]
x
p_ad[i] = coef*exp(-0.5*x %*% feature_cov_inv %*%t(x))
-0.5*x %*% feature_cov_inv %*%t(x)
x %*% feature_cov_inv %*%t(x)
x
feature_cov_inv
t(x)
ncol(ffeature_matrix_centered[i,])
feature_matrix_centered[i,]
length(feature_matrix_centered[i,])
x = as.matrix(feature_matrix_centered[i,], col=length(feature_matrix_centered[i,]))
p_ad[i] = coef*exp(-0.5*x %*% feature_cov_inv %*%t(x))
x
x = as.matrix(feature_matrix_centered[i,], row=length(feature_matrix_centered[i,]))
p_ad[i] = coef*exp(-0.5*x %*% feature_cov_inv %*%t(x))
x
x = as.matrix(feature_matrix_centered[i,], col=length(feature_matrix_centered[i,]))
x
x = as.matrix(feature_matrix_centered[i,], row=1, col=length(feature_matrix_centered[i,]))
x
x = as.matrix(feature_matrix_centered[i,], row=1, col=7)
x
x%*%feature_cov_inv
t(x)%*%feature_cov_inv
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad[i]
coef
exp(-0.5*t(x) %*% feature_cov_inv %*%x)
coef = 1.0/((2.0*pi)**100*sqrt(feature_cov_det))
coef
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad[i]
coef = 1.0/((2.0*pi)**3.5*sqrt(feature_cov_det))
coef
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad[i]
feature_cov
det(feature_cov)
feature_cov_det
sqrt(feature_cov_det)
(2.0*pi)**3.5
coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
x
t(x)
x = feature_matrix_centered[i,]
x
feature_cov_inv
View(trip_signature)
View(trip_signature2)
View(trip_signature)
View(coord)
feature_matrix
head(driver_signatures)
summary(driver_signatures$breaks)
View(trip_signature)
hist(driver_signatures$breaks)
hist(trip_signature2$hardBreaks_10M)
View(trip_signature)
View(trip_signature_scaled)
View(trip_signature2)
View(coord)
trip_signature2 = coord %>% group_by(trip_id) %>%
summarise(mean_speed = mean(speed), mean_acc = mean(acc),
mean_angular_speed=mean(angular_speed), mean_angular_acc=mean(angular_acc),
trip_length= sum(speed), hardBreaks_10M= sum(hard_break)/trip_length*10,
highway_time =sum(on_highway))
trip_signature_scaled = transmute(trip_signature,
mean_v=log(abs(mean_speed+1)), # +1 to avoid inf
mean_a=log(abs(mean_acc+1)),
mean_w=mean_angular_speed,
mean_alpha=mean_angular_acc,
s = log(trip_length),
breaks=log(hardBreaks_10M+2),
h_time = log(highway_time+2))
hist(trip_signature_scaled$breaks)
View(trip_signature2)
hist(trip_signature_scaled$breaks)
hist(trip_signature2$hardBreaks_10M)
library(ggplot2)
source('Untitled.R')
driver_signatures = featureExtraction(db_filename)
View(driver_signatures)
source('Untitled.R')
driver_signatures = featureExtraction(db_filename)
View(driver_signatures)
source('Untitled.R')
source('Untitled.R')
driver_signatures = featureExtraction(db_filename)
View(driver_signatures)
feature_matrix = as.matrix(driver_signatures)
feature_cov = cov(feature_matrix)
feature_cov_inv = solve(feature_cov)
feature_cov_det = det(feature_cov)
feature_cov_det
feature_cov_inv
feature_cov_det = det(feature_cov)
feature_matrix_centered = scale(feature_matrix, scale=FALSE)
p_ad = rep(0,200)
coef = 1.0/((2.0*pi)**3.5*sqrt(feature_cov_det))
coef
x = as.matrix(feature_matrix_centered[i,])
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad
p_ad[i]
View(driver_signatures)
feature_matrix = as.matrix(driver_signatures[,6:7])
feature_cov = cov(feature_matrix)
feature_cov
?cov
feature_cov_inv = solve(feature_cov)
feature_cov_det = det(feature_cov)
feature_cov_det
feature_matrix_centered = scale(feature_matrix, scale=FALSE)
p_ad = rep(0,200)
coef = 1.0/((2.0*pi)**2*sqrt(feature_cov_det))
x = as.matrix(feature_matrix_centered[i,])
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad[i]
coef = 1.0/((2.0*pi)**2.0*sqrt(feature_cov_det))
x = as.matrix(feature_matrix_centered[i,])
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad[i]
i
feature_cov_inv
feature_matrix = sacle(feature_matrix)
feature_matrix = scale(feature_matrix)
feature_cov = cov(feature_matrix)
feature_cov_inv = solve(feature_cov)
feature_cov_det = det(feature_cov)
feature_matrix_centered=feature_matrix
coef = 1.0/((2.0*pi)**2.0*sqrt(feature_cov_det))
x = as.matrix(feature_matrix_centered[i,])
p_ad[i] = coef*exp(-0.5*t(x) %*% feature_cov_inv %*%x)
p_ad[i]
View(trip_signature)
source('Untitled.R')
max(aa)
min(aa)
ggplot(aa)+geom_histogram()
ncol(feature_matrix)
head(feature_matrix)
driver_signatures = featureExtraction(db_filename)
feature_matrix = as.matrix(driver_signatures)
ncol(feature_matrix)
coef = 1.0/((2.0*pi)**(ncol(feature_matrix)/2.0)*sqrt(feature_cov_det))
coef
source('Untitled.R')
min(aa)
max(aa)
sum(aa)
?scale
driver_signatures = featureExtraction(db_filename)
feature_matrix = as.matrix(driver_signatures)
x = as.matrix(feature_matrix[i,])
x
mu = colMeans(feature_matrix)
sigma = apply(feature_matrix, 2, sd)
sigma
scale(x)
x
scale(x)
scale(x)**2
-0.2461815*0.2461815
p_vec = exp(-0.5*scale(x)**2.0)/sqrt(2*pi*sigma)
p_vec
prod(p_vec)
p_ad[i] = prod(p_vec)
p_ad
source('Untitled.R')
max(aa)
min(aa)
p_vec
i=2
x = as.matrix(feature_matrix[i,])
p_vec = exp(-0.5*scale(x)**2.0)/sqrt(2*pi*sigma)
p_ad[i] = prod(p_vec)
p_ad[i]
p_vec
x
x-mu
mu
x = feature_matrix[i,]
x
mu
x-mu
source('Untitled.R')
aa
sigma
mu
i=2
x = feature_matrix[i,]
x
?sd
source('Untitled.R')
aa
x = feature_matrix[i,]
p_vec = exp(-0.5*((x-mu)/sigma)**2.0)/sqrt(2*pi)/sigma
p_vec
feature_matrix = scale(feature_matrix)
apply(feature_matrix, 2, sd)
p_vec = exp(-x**2/2.0)/sqrt(2*pi)
p_ad[i] = prod(p_vec)
p_ad[i]
p_vec
p_ad[i] = prod(p_vec)
i
p_ad[i]
prod(p_vec)
x
x = feature_matrix[i,]
p_vec = exp(-x**2/2.0)/sqrt(2*pi)
p_ad[i] = prod(p_vec)
p_ad[i]
p_vec
source('Untitled.R')
aa
sum(aa)
p_ad[i]=p_ad[i]/max(p_ad[i])
p_ad[i]
source('Untitled.R')
aa
source('Untitled.R')
aa
source('Untitled.R')
aa
max(aa)
min(aa)
which.min(aa)
View(trip_signature)
system(source('Untitled.R'))
traceback
drivers_all = as.integer(system('ls drivers', intern=T))
drivers_all
driver_now = drivers_all[i]
prob = anomalyDetectionPerDriver(driver_now)
rpb
prob
aa=read.csv("sampleSubmission.csv")
head(aa)
paste(rep(1,200),1:200, sep="_")
View(aa)
drivers_all=c(1,2,3)
result_df=NULL
for(i in 1:length(drivers_all)){
driver_now = drivers_all[i]
driver_prob = anomalyDetectionPerDriver(driver_now)
result_now = data.frame(driver_trip=paste(rep(1,200),1:200, sep="_"),
prob = driver_prob)
result_df = rbind(result_df, result_now)
}
View(result_df)
result_df=NULL
for(i in 1:length(drivers_all)){
driver_now = drivers_all[i]
driver_prob = anomalyDetectionPerDriver(driver_now)
result_now = data.frame(driver_trip=paste(rep(driver_now,200),1:200, sep="_"),
prob = driver_prob)
result_df = rbind(result_df, result_now)
}
View(result_df)
rm(aa)
cat(paste("driver", driver_now, "completes!\n"))
cat(paste(i, "/", length(drivers_all), "completes!\n"))
i
dumpfilename = "prediction_ad.csv"
write.csv(result_df, file=dumpfilename, row.names=F)
source('Untitled.R')
