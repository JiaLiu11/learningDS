factorNames = c("Pclass", "Sex", "Embarked")
titanic_test = dplyr::select(titanic_test_data,
Pclass, Sex,
Age, SibSp, Parch, Fare, Embarked)
factorNames = c("Pclass", "Sex", "Embarked")
titanic_test[,factorNames] = lapply(titanic_test[,factorNames], as.factor)
View(titanic_test)
pred = predict(svmbag, newdata=titanic_test)
pred
titanic_train$Survived
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=pred)
length(pred)
svmbag
pred = predict(svmbag, newdata=titanic_test,
preProcess="knnImpute")
svmbag$pred
rm(list=ls())
titanic_train_data = read.csv("data/train.csv", stringsAsFactors=F,
na.strings="")
titanic_test_data=read.csv("data/test.csv", stringsAsFactors=F,
na.strings="")
titanic_train = dplyr::select(titanic_train_data,
Survived, Pclass, Sex,
Age, SibSp, Parch, Fare, Embarked)
factorNames = c("Survived", "Pclass", "Sex", "Embarked")
titanic_train[,factorNames] = lapply(titanic_train[,factorNames], as.factor)
titanic_test = dplyr::select(titanic_test_data,
Pclass, Sex,
Age, SibSp, Parch, Fare, Embarked)
factorNames = c("Pclass", "Sex", "Embarked")
titanic_test[,factorNames] = lapply(titanic_test[,factorNames], as.factor)
xTrans = preProcess(titanic_train, method="knnImpute")
str(titanic_train)
dummies  = dummyVars(Survived~., data=titanic_test)
dummies  = dummyVars(Survived~., data=titanic_train)
titanic_test = predict(dummies, newdata=titanic_train)
View(titanic_test)
bb=predict(dummies,newdata=titanic_test)
head(titanic_test)
titanic_train = predict(dummies, newdata=titanic_train)
titanic_test = dplyr::select(titanic_test_data,
Pclass, Sex,
Age, SibSp, Parch, Fare, Embarked)
factorNames = c("Pclass", "Sex", "Embarked")
titanic_test[,factorNames] = lapply(titanic_test[,factorNames], as.factor)
head(titanic_train)
titanic_test  = predict(dummies, newdata=titanic_test)
head(titanic_test)
titanic_test = dplyr::select(titanic_test_data,
Pclass, Sex,
Age, SibSp, Parch, Fare, Embarked)
factorNames = c("Pclass", "Sex", "Embarked")
titanic_test[,factorNames] = lapply(titanic_test[,factorNames], as.factor)
head(titanic_test)
titanic_test  = predict(dummies, newdata=titanic_test)
dummies  = dummyVars(data=titanic_train)
dummies  = dummyVars(,data=titanic_train)
xTrans = preProcess(titanic_train, method="knnImpute")
?dummyVars
dummies  = dummyVars(~.,data=titanic_train)
titanic_test  = predict(dummies, newdata=titanic_test)
head(titanic_test)
dummies
dummies  = dummyVars(~.,data=titanic_test)
titanic_test  = predict(dummies, newdata=titanic_test)
View(titanic_test)
xTrans = preProcess(titanic_train, method="knnImpute")
train_proc = predict(xTrans, titainic_train)
train_proc = predict(xTrans, titanic_train)
test_proc  = predict(xTrans, titanic_test)
?train
View(titanic_train)
View(titanic_train_data)
train(train_proc, titanic_train_data$Survived
method="treebag", trControl = ctrl)
train(train_proc, titanic_train_data$Survived,
method="treebag", trControl = ctrl)
set.seed(100)
ctrl=trainControl(method="cv", number = 10)
train(train_proc, titanic_train_data$Survived,
method="treebag", trControl = ctrl)
treebag = train(train_proc, titanic_train_data$Survived,
method="treebag", trControl = ctrl)
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc))
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc, type="class"))
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc, type="raw"))
predict(treebag, newdata=train_proc, type="raw")
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc, type="prob"))
predict(treebag, newdata=train_proc, type="prob")
predict(treebag, newdata=train_proc)
treebag
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc, type="response"))
str(titanic_train_data$Survived)
treebag = train(train_proc, as.factor(titanic_train_data$Survived),
method="treebag", trControl = ctrl)
treebag
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc, type="response"))
table(truth=titanic_train_data$Survived,
pred=predict(treebag, newdata=train_proc, type="raw"))
set.seed(100)
bagctrl=bagControl(fit=svmBag$fit,
predict=svmBag$pred,
aggregate=svmBag$aggregate)
svmbag = train(train_proc, as.factor(titanic_train_data$Survived),
"bag",trControl=ctrl, bagControl=bagctrl)
svmbag
table(truth=titanic_train_data$Survived,
pred=predict(svmbag, newdata=train_proc, type="raw"))
treebag
pred = predict(svmbag, newdata=test_proc,type="raw")
pred
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=pred)
View(result.df)
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=as.numeric(levels(pred)[pred]))
head(result.df)
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
pred = predict(treebag, newdata=test_proc,type="raw")
pred
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=as.numeric(levels(pred)[pred]))
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
library(ipred)
set.seed(100)
plot(treebag)
plot(svmbag)
ctrl = trainControl(method="cv",number=10)
grid_rf = expand.grid(.mtry=c(2,8,12))
set.seed(100)
grid_rf = expand.grid(.mtry=c(4,8,12),.ntree=c(100,200,300,400,500))
train_rf = train(train_proc, titanic_train_data$Survived,
method="rf", metric="kappa",trControl=ctrl,
tuneGrid = grid_rf)
grid_rf
grid_rf = expand.grid(.mtry=c(4,8,12))
train_rf = train(train_proc, titanic_train_data$Survived,
method="rf", metric="kappa",trControl=ctrl,
tuneGrid = grid_rf)
warnings()
train_rf
str(titanic_train_data$Survived)
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="kappa",trControl=ctrl,
tuneGrid = grid_rf)
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
train_rf
table(truth=titanic_train_data$Survived,
pred=predict(train_rf, newdata=train_proc))
(536+289)/(536+289+66)
pred = predict(train_rf, newdata=test_proc)
pred
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=as.numeric(levels(pred)[pred]))
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
plot(train_rf)
train_rf$finalModel
levels(pred)
str(pred)
train_rf
grid_rf
grid_rf = expand.grid(.mtry=c(4,8,12), .ntree=c(200, 500, 700))
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
grid_rf
grid_rf = expand.grid(.mtry=c(2,4,6,8,12))
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="parRF", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
train_rf
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
train_rf
ctrl = trainControl(method="cv",number=10)
set.seed(100)
train_svm = train(train_proc, as.factor(titanic_train_data$Survived),
method="svmRadial", metric="Kappa",trControl=ctrl)
train_svm
train_svm$finalModel
grid_svm = expand.grid(.C=c(0.25, 0.5, 1.0, 1.25, 1.5),
.sigma=c(0.02, 0.06, 0.08,1.0,1.08))
train_svm = train(train_proc, as.factor(titanic_train_data$Survived),
method="svmRadial", metric="Kappa",trControl=ctrl)
train_svm
train_svm = train(train_proc, as.factor(titanic_train_data$Survived),
method="svmRadial", metric="Kappa",trControl=ctrl,
tuneGrid = grid_svm)
train_svm
table(truth=titanic_train_data$Survived,
pred=predict(train_svm, newdata=train_proc))
table(truth=titanic_train_data$Survived,
pred=predict(train_rf, newdata=train_proc))
pred = predict(train_svm, newdata=test_proc)
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=as.numeric(levels(pred)[pred]))
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
plot(train_svm)
ctrl = trainControl(method="cv",number=10)
grid_rf = expand.grid(.mtry=c(12))
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
train_rf
table(truth=titanic_train_data$Survived,
pred=predict(train_rf, newdata=train_proc))
pred = predict(train_rf, newdata=test_proc)
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=as.numeric(levels(pred)[pred]))
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
m=randomForest(train_proc, as.factor(titanic_train_data$Survived,ntree=500,mtry=4)
)
)
m=randomForest(train_proc, as.factor(titanic_train_data$Survived),ntree=500,mtry=4)
m
grid_rf = expand.grid(.mtry=c(2,4,6,8,12))
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
train_rf$finalModel
m=randomForest(train_proc, as.factor(titanic_train_data$Survived),ntree=700,mtry=4)
m
m=randomForest(train_proc, as.factor(titanic_train_data$Survived),ntree=1000,mtry=4)
m
sqrt(12)
ctrl = trainControl(method="cv",number=10)
grid_rf = expand.grid(.mtry=c(2,3,4,5))
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
table(truth=titanic_train_data$Survived,
pred=predict(train_rf, newdata=train_proc))
train_rf$finalModel
plot(train_rf)
grid_rf = expand.grid(.mtry=c(2,3,4,5,6,8))
set.seed(100)
train_rf = train(train_proc, as.factor(titanic_train_data$Survived),
method="rf", metric="Kappa",trControl=ctrl,
tuneGrid = grid_rf)
plot(train_rf)
train_rf
?rpartXse
install.packages("DMwR")
library(DMwR)
?rpartXse
showClass("learner")
?rpartXse
data(iris)
idx=sample(150,100)
tr=iris[idx,]
ts=iris[-idx,]
stdTree=rpartXse(Species~.,tr,se=0.5)
table(predict(stdTree,ts,type='class'),ts$Species)
trSelfT <- tr
nas <- sample(100,70)
trSelfT[nas,'Species'] <- NA
baseTree <- rpartXse(Species~ .,trSelfT[-nas,],se=0.5)
table(predict(baseTree,ts,type='class'),ts$Species)
f <- function(m,d) {
l <- predict(m,d,type='class')
c <- apply(predict(m,d),1,max)
data.frame(cl=l,p=c)
}
treeSelfT <- SelfTrain(Species~ .,trSelfT,learner('rpartXse',list(se=0.5)),'f')
table(predict(treeSelfT,ts,type='class'),ts$Species)
trSelfT[nas,'Species'] <- NA
baseTree <- rpartXse(Species~ .,trSelfT[-nas,],se=0.5)
table(predict(baseTree,ts,type='class'),ts$Species)
?rf
library(kernlib)
library(kernlab)
?kernlab
?rf
?ksvm
randomForest
?createDataPartition
idx <-createDataPartition(titanic_train_data, p=0.8)
View(titanic_train_data)
View(titanic_train)
idx <-createDataPartition(titanic_train, p=0.8)
?createDataPartition
idx <-createDataPartition(titanic_train, p=0.8,list=F,)
idx <-createDataPartition(titanic_train, p=0.8,list=F)
idx <-createDataPartition(train_proc, p=0.8,list=F)
View(idx)
tr=as.data.frame(train_proc)
View(tr)
idx <-createDataPartition(tr, p=0.8,list=F)
idx <-createDataPartition(tr, p=0.8)
idx <-createDataPartition(titanic_train_data$Survived, p=0.8)
tr <- train_proc[idx,]
ts <- train_proc[-idx,]
head(train_proc)
str(train_proc)
str(idx)
max(idx)
tr <- train_proc[idx,]
idx <-createDataPartition(titanic_train_data$Survived, p=0.8,list=F)
tr <- train_proc[idx,]
ts <- train_proc[-idx,]
tr_label = as.factor(titanic_train_data$Survived)
tr_label = as.factor(titanic_train_data$Survived[idx,])
tr_label = as.factor(titanic_train_data[idx,]$Survived)
ts_label = as.factor(titanic_train_data[-idx,]$Survived)
rf = randomForest(tr, tr_label, mtry=4)
rf
train_rf$finalModel
table(predict(rf,ts,type='class'),ts_label)
(93+53)/(93+17+15+53)
str(tr)
trSelfT <- tr
nas <- sample(713,100)
trSelfLabel = tr_label
trSelfLabel[nas] <- NA
trSelfLabel
nas <-createDataPartition(trSelfLabel, p=0.8,list=F)
nas
summary(nas)
length(nas)
trSelfLabel[nas] <- NA
baserf <- randomForest(trSelfT[-nas,],trSelfLabel[-nas],mtry=4)
head(trSelfT[-nas,])
trSelfLabel[-nas]
trSelfLabel[-nas]
length(trSelfLabel[-nas])
nrow(trSelfT[-nas,])
length(trSelfT)
View(trSelfT)
aa=trSelfT[-nas,]
bb=trSelfLabel[-nas]
length(bb)
bb
bb=c(1,2,3)
bb[-1]
bb[-c(2,3)]
str(trSelfLabel)
trSelfLabel
trSelfLabel = tr_label
trSelfLabel
nas
length(nas)
nas <-createDataPartition(trSelfLabel, p=0.8,list=F)
length(nas)
nas
nas <-createDataPartition(trSelfLabel, p=0.2,list=F)
nas
trSelfLabel[nas] <- NA
trSelfLabel
baserf <- randomForest(trSelfT[-nas,],trSelfLabel[-nas],mtry=4)
table(predict(baserf,ts,type='class'),ts_label)
table(predict(rf,ts,type='class'),ts_label)
f <- function(m,d) {
l <- predict(m,d,type='class')
c <- predict(m,d,type='prob')
data.frame(cl=l,p=c)
}
rfSelfT <- SelfTrain(trSelfT,trSelfLabel,
learner('randomForest',list(mtry=4)),'f')
predict(train_rf, ts,type="prob")
predict(train_rf, ts)
predict(train_rf, ts,type="raw")
predict(train_rf, ts,type="prob")
predict(train_rf, ts,type="response")
predict(train_rf, ts,type="raw")
predict(train_rf, ts,type="prob")
?predict
predict(baserf,ts,type='class')
predict(baserf,ts,type='prob')
f <- function(m,d) {
l <- predict(m,d,type='class')
c <- apply(predict(m,d,type='prob'), 1, max)
data.frame(cl=l,p=c)
}
f(baserf,ts)
rfSelfT <- SelfTrain(trSelfT,trSelfLabel,
learner('randomForest',list(mtry=4)),'f')
trSelfT
head(trSelfT)
str(trSelfT)
rfSelfT <- SelfTrain(as.data.frame(trSelfT),trSelfLabel,
learner('randomForest',list(mtry=4)),'f')
table(predict(rfSelfT,ts,type='class'),ts$Species)
rfSelfT <- SelfTrain(trSelfT,trSelfLabel,
learner('randomForest',list(mtry=4)),'f')
traceback()
length(trSelfLabel)
length(trSelfT)
str(trSelfT)
SelfTrain()
SelfTrain
?SelfTrain
aa=cbind(trSelfLabel,trSelfT )
head(aa)
trSelfLabel
View(aa)
View(aa)
str(aa[,2])
str(aa[,1])
str(trSelfLabel)
str(aa[,])
str(aa)
aa=as.data.frame(aa)
str(aa)
aa=cbind(as.data.frame(trSelfLabel),as.data.frame(trSelfT))
head(aa)
aa=cbind(Survived=as.data.frame(trSelfLabel),as.data.frame(trSelfT))
head(aa)
trSelfT_comb = cbind(Survived=as.data.frame(trSelfLabel),as.data.frame(trSelfT))
rfSelfT <- SelfTrain(Survived~.,trSelfT_comb,
learner('randomForest',list(mtry=4)),'f')
head(trSelfT_comb)
trSelfT_comb = cbind(Survived=as.data.frame(trSelfLabel),as.data.frame(trSelfT))
View(trSelfT_comb)
colnames(trSelfT_comb)[1]
trSelfT_comb = cbind(as.data.frame(trSelfLabel),as.data.frame(trSelfT))
colnames(trSelfT_comb)[1]="Survived"
rfSelfT <- SelfTrain(Survived~.,trSelfT_comb,
learner('randomForest',list(mtry=4)),'f')
table(predict(rfSelfT,ts,type='class'),ts$Species)
table(predict(rfSelfT,ts,type='class'),ts_label)
table(predict(baserf,ts,type='class'),ts_label)
test_temp = cbind(Survived=NA, test_proc)
View(test_temp)
test_temp = cbind(Survived=NA, test_proc)
train_emp = cbind(titanic_train_data$Survived, train_proc)
head(train_emp)
View(train_emp)
View(titanic_test_data)
View(titanic_train_data)
train_emp = cbind(Survived = train_label, train_proc)
train_emp = cbind(Survived = as.factor(titanic_train_data$Survived), train_proc)
View(train_emp)
as.factor(titanic_train_data$Survived)
test_temp = as.data.frame(cbind(Survived=NA, test_proc))
str(test_temp)
as.data.frame(train_proc))
train_emp = cbind(as.data.frame(as.factor(titanic_train_data$Survived)),
as.data.frame(train_proc))
train_temp = cbind(as.data.frame(as.factor(titanic_train_data$Survived)),
as.data.frame(train_proc))
train_temp = cbind(as.data.frame(as.factor(titanic_train_data$Survived)),
as.data.frame(train_proc))
selfTran_data = rbind(test_temp, train_temp)
colnames(train_temp)[1]="Survived"
selfTran_data = rbind(test_temp, train_temp)
View(selfTran_data)
str(selfTran_data)
selfTran_data = rbind(train_temp,test_temp)
rfSelfT <- SelfTrain(Survived~.,selfTran_data,
learner('randomForest',list(mtry=4)),'f')
table(predict(rfSelfT,train_temp,type='class'),train_temp$Survived)
rfSelfT
669+47+101+326
table(predict(rfSelfT,train_temp,type='class'),train_temp$Survived)
669+47+101+326
535+56+14+286
pred = predict(rfSelfT, test_temp, type='class')
pred
result.df = data.frame(PassengerId=titanic_test_data$PassengerId,
Survived=as.numeric(levels(pred)[pred]))
write.csv(result.df,
file="prediction_bagging.csv",
row.names=FALSE)
str(rfSelfT)
library(DMwR)
test_temp = as.data.frame(cbind(Survived=NA, test_proc))
train_temp = cbind(as.data.frame(as.factor(titanic_train_data$Survived)),
as.data.frame(train_proc))
colnames(train_temp)[1]="Survived"
selfTrain_data = rbind(train_temp,test_temp)
# self train
rfSelfT <- SelfTrain(Survived~.,selfTran_data,
learner('randomForest',list(mtry=4)),'f')
table(predict(rfSelfT,train_temp,type='class'),train_temp$Survived)
prop.table(table(predict(rfSelfT,train_temp,type='class'),train_temp$Survived))
prop.table(table(truth=titanic_train_data$Survived,
pred=predict(train_rf, newdata=train_proc)))
table(truth=titanic_train_data$Survived,
pred=predict(train_rf, newdata=train_proc))
table(truth=train_temp$Survived,
pred=predict(rfSelfT,train_temp,type='class'))
