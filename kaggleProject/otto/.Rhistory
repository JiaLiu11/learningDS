?clfit
library(caret)
?caret
?train
?featurePlot
library(sqldf)
install.packages("sqldf")
data()
library(sqldf)
sqldf("select * from iris limit 5")
sqldf("select count(*) from iris")
sqldf("select Species, count(*) from iris group by Species")
df=data.frame(a=1:5, b=letters[1:5])
sqldf("select * from df")
sqldf("select avg(a) mean, variance(a) var from df")
sqldf("select Species, count(*) count from iris group by Species")
install.packages("sqldf",dep=T)
install.packages("sqldf", dep = T)
library(RH2)
packageVersion("RH2")
library(sqldf)
sqldf("select * from iris limit 5")
sqldf("select * from iris limit 5")
sqldf("select avg(a) mean, var_samp(a) var from DF")
df
sqldf("select avg(a) mean, var_samp(a) var from df")
?sqldf
getOption("sqldf.connection")
library(caret)
str(iris)
?featurePlot
featurePlot(x=iris[,1:4],y=iris$Species, plot="pairs", auto.key=list(columns=3))
featurePlot(x=iris[,1:4],y=iris$Species, plot="pairs", auto.key=list(columns=2))
featurePlot(x=iris[,1:4],y=iris$Species, plot="pairs", auto.key=list(columns=1))
featurePlot(x=iris[,1:4],y=iris$Species, plot="pairs", auto.key=list(columns=3))
featurePlot(x=iris[,1:4],y=iris$Species, plot="ellipse", )
?transparentTheme
featurePlot(x=iris[,1:4],y=iris$Species, plot="box", )
10*1000/60
166/24
aa=matrix(1:9,nrow=3,ncol=3)
aa
aa=as.data.frame(aa)
aa
expand.grid(aa)
library(rgl)
example(plot3d)
install.packages("plot3D")
library(plot3D)
example(persp3D)
library(dplyr)
install.packages('dplyr')
library('RSQLite')
?upgrade.packages
?upgrade.packages()
?upgrade.packageStatus
install.packages("installr")
install.packages("ggplot2", lib='~/code/R.Libraries')
install.packages("caret", lib='~/code/R.Libraries')
update.packages()
update.packages(checkBuilt = T, ask = F)
library(e1071)
installed.packages
installed.packages()
aa=installed.packages()[,'packages']
aa=installed.packages()
head(aa)
View(aa)
install.packages("httr")
library(caret)
install.packages(caret)
install.packages("caret")
library(dplyr)
library(RSQLite)
library(RSQLite)
library(dplyr)
install.packages("RSQLite")
demo(dplyr)
library(ggplot2)
news(Version == "1.0.0", package = "ggplot2")
demo(ggplot2)
packageStatus()
library(caret)
data(segmentationData)
colnames(segmentationData)[1:4]
head(segmentationData[, 1:4])
segmentationData$Cell <- NULL
taining<-subset(segmentationData, Case=="Train")
testing<-subset(segmentationData, Case=="Test")
summary(segmentationData[,1:4])
training=taining
rm(taining)
str(training[,1:6])
training$Case=NULL
testing$Case=NULL
?sample
?createDataPartition
?preProcess
trainX=training[,names(training!="Class")]
preProcValues=preProcess(trainX,meyhod=c("center", "scale"))
trainX=training[,names(training)!="Class"]
preProcValues=preProcess(trainX,meyhod=c("center", "scale"))
preProcValues
preProcValues=preProcess(trainX,method=c("center", "scale"))
preProcValues
scaledTrain=predict(preProcValues,trainX)
createFolds
?createFolds
load("~/code/.RData")
400*0.5/60
library(caret)
?sensitivity
?createFolds
?createResample
aa=createResample(trainX)
View(training)
aa=createResample(training$Class)
library(rpart)
rpart1=rpart(Class!., data=training, control=rpart.conrol(maxdepth=2))
rpart1=rpart(Class~., data=training, control=rpart.conrol(maxdepth=2))
rpart1=rpart(Class~., data=training, control=rpart.control(maxdepth=2))
rpart1
library(partykit)
install.packages("partykit")
library(partykit)
rpart1a=as.party(rpart1)
plot(rpart1a)
plot(rpart1)
plot(rpart1a)
plot(rpart1)
plot(rpart1a)
rpart1a
rpart1=rpart(Class~., data=training, control=rpart.control(maxdepth=3))
rpart1a=as.party(rpart1)
plot(rpart1a)
rpart1a
rpart1=rpart(Class~., data=training, control=rpart.control(maxdepth=2))
rpartFull=rpart(Class~., data=training)
rpartFull
rpartPred=predict(rpartFull, testing, type="class")
confusionMatrix(rpartPred, testing$Class)
library(e1071)
install.packages("e1071")
confusionMatrix(rpartPred, testing$Class)
?confusionMatrix
summary(training$Class)
train(Class~., data=training, method="rpart")
?tuneLength
?train
train(Class~., data=training, method="rpart", tuneLength = 30)
train(Class~., data=training, method="rpart", tuneLength = 30, trControl = cvCtrl)
cvCtrl=trainControl(method="repetedcv", repeats=3, summaryFunction = twoClassSummary, classProbs = T)
rpartTune = train(Class~., data=training, method="rpart", tuneLength=30, metric="ROC", trControl=cvCtrl)
cvCtrl=trainControl(method="repeatedcv", repeats=3, summaryFunction = twoClassSummary, classProbs = T)
rpartTune = train(Class~., data=training, method="rpart", tuneLength=30, metric="ROC", trControl=cvCtrl)
install.packages("pROC")
rpartTune = train(Class~., data=training, method="rpart", tuneLength=30, metric="ROC", trControl=cvCtrl)
rpartTune
plot(rpartTune)
plot(rpartTune, scales=list(x-list(log=10)))
plot(rpartTune, scales=list(x=list(log=10)))
plot(rpartTune)
library(pROC)
rpartProbs=predict(rpartTune$finalModel, testing, type="prob")
rpartROC=roc(testing$Class, rpartProbs[,"PS"], levels=rev(test$Class))
rpartROC=roc(testing$Class, rpartProbs[,"PS"], levels=rev(testing$Class))
plot(rpartROC)
plot(rpartROC, type="S")
plot(rpartROC)
plot(rpartROC, type="S")
?plot
plot(rpartROC, type="S")
plot(rpartROC, type="S",print.thres=.5)
grid=expand.grid(.model="tree", .trails=c(1:100), .winnow=False)
grid=expand.grid(.model="tree", .trails=c(1:100), .winnow=F)
grid
c5Tune=train(trainX, traning$Class, method="C5.0", metric="ROC", tuneGrid=grid, trControl=cvCtrl)
c5Tune=train(trainX, training$Class, method="C5.0", metric="ROC", tuneGrid=grid, trControl=cvCtrl)
grid=expand.grid(.model="tree", .trials=c(1:100), .windnow=F)
c5Tune=train(trainX, training$Class, method="C5.0", metric="ROC", tuneGrid=grid, trControl=cvCtrl)
head(grid)
grid=expand.grid(.model="tree", .trials=c(1:100), .winnow=F)
c5Tune=train(trainX, training$Class, method="C5.0", metric="ROC", tuneGrid=grid, trControl=cvCtrl)
c5Tune
c5Prob=predict(c5Tune$finalModel, testing, type="prob")
c5roc=roc(testing$Class, c5Prob[,"PS"], levels=rev(testing$Class))
plot(c5roc, type="S", add=T)
plot(c5roc, type="S", add=T, col="blue")
library(caret)
?rev
unique(testing$Class)
rev(testing$Class)
stopifnot(1==2)
stopifnot(1==1)
stopifnot(testing$Class==rev(testing$Class))
stopifnot(testing$Class==sort(testing$Class, decreasing=T))
stopifnot(testing$Class==sort(testing$Class, decreasing=F))
stopifnot(rev(testing$Class)==sort(testing$Class, decreasing=T))
rev(levels(testing$Class))
library(kernlab)
install.packages("kernlab")
set.seed(1)
svmTune=train(x=trainX, y=training$Class, method="svmRadial", tuneLength=9, preProc=c("center", "scale"), metric="ROC", trControl = cvCtrl)
svmTune
svmPred=predict(svmTune, testing[,-Class])
View(testing)
svmPred=predict(svmTune, testing[,names(testing)!=Class])
svmPred=predict(svmTune, testing[,names(testing)!='Class'])
confusionMatrix(testing$Class, svmPred)
confusionMatrix(testing$Class, svmPred,positive = 'WS')
?resamples
cvValues=resamples(list(CART=rpartTune, SVM=svmTune, C5.0=c5Tune))
summary(cvValues)
bwplot(cvValues)
dotplot(cvValues)
parallelplot(cvValues)
xyplot(cvValues)
splom(cvValues)
splom(cvValues, metrix="ROC")
splom(cvValues, metrix="kappa")
splom(cvValues, metrix="ROC")
splom(cvValues, metrix="kappa")
splom(cvValues, metrix="AIR")
?diff
aa=data.frame(id=seq(1,5),value=c(1,2,2,1,2))
bb=data.frame(id=seq(1,5),class1=c(1,0,0,1,0), class2=c(0,1,1,0,1))
View(aa)
View(bb)
aa=data.frame(id=seq(1,5),class=paste("class",c(1,2,2,1,2), sep=""))
View(aa)
devtools::install_github('dmlc/xgboost',subdir='R-package')
library(devtools)
install.packages("devtools")
devtools::install_github('dmlc/xgboost',subdir='R-package')
rm(list=ls())
setwd('~/code/kaggleProject/otto/')
require(xgboost)
require(methods)
train = read.csv('data/train.csv',header=TRUE,stringsAsFactors = F)
test = read.csv('data/test.csv',header=TRUE,stringsAsFactors = F)
train = train[,-1]
test = test[,-1]
y = train[,ncol(train)]
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-ncol(train)],test)
x = as.matrix(x)
View(x)
str(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 8)
cv.nround = 50
bst.cv = xgb.cv(param=param, data = x[trind,], label = y,
nfold = 3, nrounds=cv.nround)
nround = 50
bst = xgboost(param=param, data = x[trind,], label = y, nrounds=nround)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
View(pred)
pred = t(pred)
pred = format(pred, digits=2,scientific=F) # shrink the size of submission
View(pred)
pred = data.frame(1:nrow(pred),pred)
View(pred)
names(pred) = c('id', paste0('Class_',1:9))
View(pred)
View(train)
View(train)
library(caret)
rm(list=ls())
train = read.csv('data/train.csv')
test  = read.csv('data/test.csv')
train$id = NULL
test$id = NULL
trainX = train[,names(train)!="target"]
cvCtrl = trainControl(method="repeatedcv", repeats=3, returnData = F)
str(trainX)
multinomTune = train(trainX, train$target,
method="multinom", trControl = cvCtrl)
predLabel = pred(multinomTune$finalModel, type="class")
predLabel = predict(multinomTune$finalModel, type="class")
str(predLabel)
length(predLabel)
confusionMatrix(predLabel, train$target)
predLabel = predict(multinomTune$finalModel, type="probability")
predLabel = predict(multinomTune$finalModel, type="probs")
View(predLabel)
plot(multinomTune)
testLabel = predict(multinomTune$finalModel, test, class="class")
library(reshape2)
testLabel = cbind(id=seq(1, nrow(testLabel)), testLabel)
testLabel = data.frame(id=seq(1, nrow(testLabel)), testLabel)
testLabel = data.frame(id=seq(1, nrow(testLabel)), as.matrix(testLabel))
id=seq(1, nrow(testLabel))
testLabel = data.frame(id=seq(1, length(testLabel)), as.matrix(testLabel))
View(testLabel)
testLabel = predict(multinomTune$finalModel, test, class="class")
testLabel = data.frame(id=seq(1, length(testLabel)), testLabel)
View(testLabel)
testLabel = dcast(testLabel, id~)
testLabel = dcast(testLabel, id~.)
View(testLabel)
testLabel = predict(multinomTune$finalModel, test, class="class")
testLabel = data.frame(id=seq(1, length(testLabel)), testLabel)
?dcast
testLabel = reshape2::dcast(testLabel, id~testLabel)
View(testLabel)
testLabel[1,]
which(is.na(testLabel[1,]0)
which(is.na(testLabel[1,])
)
i=1
which(testLabel[i,]!=0)
testLabel[1,]
which(testLabel[i,-1]!=0)
for(i in 1:nrow(testLabel)){
testLabel[i, which(is.na(testLabel[i,]))]=0
testLabel[i, which(testLabel[i,-1]!=0)]=1
}
View(testLabel)
